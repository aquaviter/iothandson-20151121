=======================
OpenBlocks IoT BX1 設定
=======================

本章ではOpenBlocks IoT BX1 (以下 BX1) を使用し、センサーデバイス "CC2541" のデータを "SORACOM Air" の回線で "AWS IoT" に送信するところまでの設定を行います

TODO: 目次

BX1の取り扱い (電源ON/OFF・再起動、SIM挿入)
===========================================

BX1は給電開始と共に電源ONとなります。USBケーブルを接続すると起動開始です

INITボタンや電源ボタンはOSのシャットダウンと再起動に利用されますので、必要時以外は押さないでください

部位の名前やSIM挿入方法については、下記を参照してください

.. image:: images/bx1_1-1_bx1.png

(`OpenBlocks IoT Family WEB UI セットアップガイド P7 <http://openblocks.plathome.co.jp/common/pdf/OpenBlocksIoTSeriseSetupGuide1_0_5.pdf#page=7>`_ より抜粋)

ステータスインジケータ (LEDの表示色)
------------------------------------

BX1は *STATUS* のLEDにて状態を把握することができます

本ハンズオンにおいては、起動後は **白色、水色、青色** が望ましく、それ以外の色の場合は不具合がある可能性がありますので、チューターにご相談ください

具体的なLED色と状態については、下記を参照してください

.. image:: images/bx1_1-2_led.png

(`OpenBlocks IoT Family WEB UI セットアップガイド P7 <http://openblocks.plathome.co.jp/common/pdf/OpenBlocksIoTSeriseSetupGuide1_0_5.pdf#page=7>`_ より抜粋)

Web管理画面(WebUI)の表示とログイン
==================================

**注意:** BX1に接続したPCやスマートフォンは、BX1のWi-Fiに接続している限り、後ほど設定するSORACOM Airの設定が終わるまではインターネットに接続することが出来ません。また、SORACOM Airの設定が完了すると、インターネットへのアクセスは "PC =[wi-fi]=> BX1 =[SORACOM Air]=> インターネット" という経路になり、 **通信料が発生する可能性があります** ので、Dropbox等の共有ソフトの動作をOFFにすることを **強く推奨いたします**

BX1とWi-Fiで接続する
--------------------

BX1起動が完了すると、BX1はWi-Fiのアクセスポイントとして動作を開始します

お手持ちのPCやスマートフォンから SSID を探し、接続してください

- SSID: ``_ホストID_1121handson``
- Password: ``ホストID``

802.11g, WPA2-PSK の設定で接続できます

お手持ちのBX1のホストID確認方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ホストIDは、BX1のウラ面のバーコード上の文字と数字の組み合わせになります

下記例では **F2A00788** がホストIDです (そのためSSIDは **_F2A00788_1121handson** となります)

.. image:: images/bx1_2-1_serial.jpg

WebUIを表示する
---------------

BX1にWi-Fiで接続できたら、下記URLにてWebUIを表示します

http://192.168.254.254:880

下記の画面が出れば正常に接続ができています

.. image:: images/bx1_2-2_webui-login.png

WebUIにログインする
-------------------

WebUIは下記IDとパスワードでログインできます

- ID: webuiadm
- Password: 0BSI0T (ゼロ ビー エス アイ ゼロ ティー)

ログインに成功すると、下記画面が表示されます

.. image:: images/bx1_2-3_webui-dashboard.png

CC2541をデバイスとして登録し、動作の確認をする
==============================================

Bluetoothの使用を開始する
-------------------------

#. WebUIから [サービス] - [基本] を表示
#. *Bluetooth* の使用設定を **使用する** にして [保存]

.. image:: images/bx1_3-1_bluetooth-enable.png

CC2451を検出して使用できるようにする
------------------------------------

#. WebUIから [サービス] - [Bluetooth関連] を表示
#. **Bluetooth LEデバイス検出** の [検出] をクリック
#. 一覧の中から自分のデバイスを探し **使用設定** にチェックをして [保存]

NOTE: Bluetooth デバイス検出の方でなく、 **Bluetooth LEデバイス検出** を押すようにしてください

.. image:: images/bx1_3-2_ble-list.png

自分のデバイスの探し方
~~~~~~~~~~~~~~~~~~~~~~

Device Name = SensorTag が大量に表示される可能性があります

お配りした CC2541 にはアドレスのタグが書かれており、画面上に表示されている *Device Address* と一致したものが、ご自分の CC2451 となります

赤いカバーをはがすと、下記のようにアドレスが記載されています (タグにはコロン文字が記載されていません)

.. image:: images/bx1_3-3_cc2541-tag.jpg

確認
----

保存すると WebUI は下記のようになります

.. image:: images/bx1_3-4_ble-registered.png

ローカルへのデータ収集設定
==========================

AWS IoTへの送信の前に、まず CC2541 からのデータ収集ができているか確認をします

BX1のデータ収集機能を開始する
-----------------------------

#. WebUIから [サービス] - [基本] を表示
#. **データ収集** における **データ収集** ならびに **PD Handler** をそれぞれ **使用する** にして [保存]

NOTE: "PD Handler" は "データ収集" を <使用する> にすると表示されます

.. image:: images/bx1_4-1_collector-start.png

注意: データ収集を開始すると、新たにデバイス登録をすることができなくなります。デバイス登録をする場合は、まず、データ収集を行わないように設定を変更してください

BX1内へのデータ収集機能を開始する
---------------------------------

#. WebUIから [サービス] - [収集設定] を表示
#. **本体内(local)** を **使用する**

.. image:: images/bx1_4-2-1_collect-setting.png

ページ後半に移動し **dev_le_0000001** の設定を下記のようにします

#. **送信対象** を **送信する**
#. **送信先設定** を **local** にチェック
#. 以上を確認し [保存]

.. image:: images/bx1_4-2-2_collect-setting.png

グラフの表示
~~~~~~~~~~~~

localへのデータ収集が開始されると、WebUI内のグラフに表示が開始されます

[サービス] - [データ表示] にて確認できます

.. image:: images/bx1_4-3_plot.png

うまく表示されない場合は、後述の データ収集状況の確認 で確認します

データ収集状況の確認 (デバッグ)
===============================

WebUIから [サービス] - [収集ログ] にて、動作確認が可能です

ログ選択はそれぞれ下記のとおりです

- **pd-handler-stdout.log** : CC2541 <-> BX1 間の送受信状況
- **pd-emitter.log** : BX1 <-> 送信先(localやAWS IoT等) 間の送受信状況

注意: ログは自動的な更新をサポートしておりません。リロードの後、プルダウン選択をするようにしてください

下記画面は CC2541 からのデータ読み出しが成功している場合のログ画面です。JSONが表示されているのが見てわかります

.. image:: images/bx1_5-1_log.png

トラブルシュート: うまく収集がされていない場合
----------------------------------------------

pd-handler-stdout.log に ``timeout: ...`` などと表示され、JSONデータが出力されてこない場合、 CC2451 との接続が切れている可能性があります

CC2451 の電源を入れなおすことで回復できる事があります

NOTE: CC2451のLEDが一瞬だけ点滅し、消灯したら接続が確立している合図です。しばらく経ってから pd-handler-stdout.log を確認してみてください

SORACOM Air
===========

BX1はSORACOM Airに対応しております

**注意:** 本設定を行うとBX1はSORACOM Air経由でインターネット接続が可能となります。それにより、BX1がWi-Fiルーターのような振る舞いとなり、BX1にWi-Fi接続したPCやスマートフォン等の通信は "PC =[wi-fi]=> BX1 =[SORACOM Air]=> インターネット" という経路になり、 **通信料が発生する可能性があります** ので、Dropbox等の共有ソフトの動作をOFFにすることを **強く推奨いたします**

APN設定
-------

#. WebUIから [ネットワーク] - [基本] を表示
#. ページ下部の **サービスネットワーク(モバイル回線)** を **使用する** (クリックでAPN設定が展開します)
#. APN / ユーザ名 / パスワード をそれぞれ下記の通り設定し [保存]

- APN: soracom.io
- ユーザ名: sora
- パスワード: sora

.. image:: images/bx1_6-1_soracom.png

再起動
------

#. WebUIから [メンテナンス] - [停止・再起動] を表示
#. 再起動を実施します (最後にに確認ダイアログがでるので見逃さないようにしてください)

.. image:: images/bx1_6-2_reboot.png

AWS IoT
=======

いよいよ CC2451 のデータを SORACOM Air を経由して AWS IoT に送信します

準備
----

**AWS IoTから取得しておくもの**

- 証明書(Certificate)ファイル <拡張子 .pem.crt>
- プライベートキー(PrivateKey)ファイル <拡張子 .pem.key>
- エンドポイントURL (``aws iot describe-endpoint`` 等)

**その他取得しておくもの**

- `root certificateファイル <https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem>`_

NOTE: ファイル名にスペースが含まれています。BX1ではファイル名にスペース文字が使用できないため、処置をしておいてください (本例では スペースを ``_`` に変更しています)

**決めておくこと**

- 送信先トピック名 (本例では ``handson/device01`` としています)

BX1設定
-------

ファイルアップロード
~~~~~~~~~~~~~~~~~~~~

まず、 AWS IoTの証明書ファイル、プライベートキーファイル並びにルート証明書ファイルの3つをBX1にアップロードします

#. WebUIから [システム] - [ファイル管理] を表示
#. 本画面からファイルを3つ、それぞれアップロード

すべてアップロードされると、下記のような画面となります

.. image:: images/bx1_7-1_file-upload.png

システム全体設定
~~~~~~~~~~~~~~~~

#. WebUIから [サービス] - [収集設定] を表示
#. **AWS IoT** を **使用する** (クリックで設定が展開します)
#. 下記の通り設定します

- 送信先ホスト: <エンドポイント>を設定
- root証明書 : ``/var/webui/upload_dir/VeriSign-Class_3-Public-Primary-Certification-Authority-G5.pem``

NOTE: 先のファイルアップロード画面でアップロードされたファイルは BX1内の ``/var/webui/upload_dir/`` にアップロードされるので、それ以下のパスを指定することでファイルの読み込みが可能です

.. image:: images/bx1_7-2-1_awsiot.png

保存せず、ページ下部へ移動します

デバイス毎設定
~~~~~~~~~~~~~~

#. dev_le_0000001 の **送信先設定** で **AWSIOT** にチェックを付けます (クリックで設定が展開します)
#. 下記の通り設定します

* トピック名 : ``handson/device01``
* 証明書(AWS IoT) : ``/var/webui/upload_dir/(アップロードした .pem.crtファイル)``
* プライベートキー(AWS IoT) : ``/var/webui/upload_dir/(アップロードした .pem.keyファイル)``

.. image:: images/bx1_7-2-2_awsiot.png

デバッグとトラブルシュート
--------------------------

送信状況は データ収集状況の確認 を使用してください

またAWS IoT側に送信されているかの確認には、CloudWatchを使用する他、 **mosquitto_sub** コマンドが使えます

``mosquitto_sub --cafile VeriSign-Class_3-Public-Primary-Certification-Authority-G5.pem --cert ANY-certificate.pem.crt --key ANY-private.pem.key -h ANY.iot.ap-northeast-1.amazonaws.com -p 8883 -q 1 -d -t handson/device01``

mosquitto_sub で サーバに接続できない
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

証明書がINACTIVEである可能性があります。AWS IoT上で当該する証明書をActivateしてください

mosquitto_sub で ``CONNECT`` が連続で表示され、待ち受けられない
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

証明書に有効なポリシーがアタッチされていない可能性があります。AWS IoT上で当該する証明書に有効なPolicyをattachしてください

付録: 本ハンズオンで使用するBX1の設定について
=============================================

本ハンズオンで配りましたBX1は、ハンズオンをスムーズにすすめるため、標準構成から下記の変更を行っております

#. 管理者アカウント作成
#. Wi-Fi AP設定

管理者アカウント
----------------

- 標準: WebUIに初回アクセスの際、設定をします
- 今回: *webuiadm* ユーザ作成済

Wi-Fi AP設定
------------

- 標準: SSID = *iotfamily_MACADDRESS*, Password = *openblocks*
- 今回: SSID = *_HOSTID_1121handson*, Password = *HOSTID* (+ Wi-Fiチャネル 混線回避のため個別設定済)

